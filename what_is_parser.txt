parser takes in the tokens read by the scanner and recognizes "grammar"
grammar is defined by something like this (BNF):
expresssion: number | expression '+' expression | expression '-' expression
number: Int
^ this is recursive and number is a base return case

abstract syntax tree on expression 1 * 9 + 3 * 4 looks like:
					 +
					/ \
				 /   \
				/     \
			 *       *
			/ \     / \
		 1   9   3   4

the idea is to evaluate the entire tree (expression) into one value,
which in pseudo is something like:

read in top node '+', look at its left and right child node

	left node is '*' (non-terminating), look at its left and right child nodes
		left node is 1, right node is 9, return each value
	evaluate '*' on 1 and 9, return value (9)

	right node is '*', look at its left and right child nodes
		left node is 3, right node is 4, return each value
	evaluate '*' on 3 and 4, return value (12)

evaluate '+' on 9 and 12, return value (21)

implementing order of operations is semantic analysis and involves creating
precedence in expressions or something. will/can do after basic parser is 
written.

